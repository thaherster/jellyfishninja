<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="apple-touch-icon" sizes="76x76" href="homeassets/img/apple-icon.png">
  <link rel="icon" type="image/png" href="homeassets/img/favicon.png">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <title>
    Blog | Jellyfish Ninja
  </title>
  <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no' name='viewport' />
  <!--     Fonts and icons     -->
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css">
  <!-- CSS Files -->
  <link href="homeassets/css/material-kit.css?v=2.0.3" rel="stylesheet" />
  <!-- CSS Just for demo purpose, don't include it in your project -->
  <link href="homeassets/demo/demo.css" rel="stylesheet" />
</head>

<body class="profile-page sidebar-collapse">
<nav class="navbar navbar-transparent navbar-color-on-scroll fixed-top navbar-expand-lg" color-on-scroll="100" id="sectionsNav">
  <div class="container">
    <div class="navbar-translate">
      <a class="navbar-brand jelly-logo" href="/">
        <img src="images/jellyfish_color.png"></a>


      <button class="navbar-toggler" type="button" data-toggle="collapse" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
        <span class="navbar-toggler-icon"></span>
        <span class="navbar-toggler-icon"></span>
      </button>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="navbar-nav ml-auto">
        <li class="dropdown nav-item">
          <a href="#" class="dropdown-toggle nav-link" data-toggle="dropdown">
            <i class="material-icons">apps</i> More
          </a>
          <div class="dropdown-menu dropdown-with-icons">
            <a href="/features" class="dropdown-item">
              <i class="material-icons">ballot</i> Features
            </a>
            <a href="/pricing" class="dropdown-item">
              <i class="material-icons">attach_money</i> Pricing
            </a>
            <a href="/blog" class="dropdown-item">
              <i class="material-icons">art_track</i> Blog
            </a>
            <a href="/company" class="dropdown-item">
              <i class="material-icons">nature_people</i> Company
            </a>
          </div>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/dashboard">
            <i class="material-icons">dashboard</i> Dashboard
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" rel="tooltip" title="" data-placement="bottom" href="https://twitter.com/JellyfishNinja_" target="_blank" data-original-title="Follow us on Twitter">
            <i class="fa fa-twitter"></i>
          </a>
        </li>
        <!--<li class="nav-item">-->
        <!--<a class="nav-link" rel="tooltip" title="" data-placement="bottom" href="https://www.facebook.com/CreativeTim" target="_blank" data-original-title="Like us on Facebook">-->
        <!--<i class="fa fa-facebook-square"></i>-->
        <!--</a>-->
        <!--</li>-->
        <!--<li class="nav-item">-->
        <!--<a class="nav-link" rel="tooltip" title="" data-placement="bottom" href="https://www.instagram.com/CreativeTimOfficial" target="_blank" data-original-title="Follow us on Instagram">-->
        <!--<i class="fa fa-instagram"></i>-->
        <!--</a>-->
        <!--</li>-->
      </ul>
    </div>
  </div>
</nav>
<div class="page-header header-filter" data-parallax="true" style="background-image: url('homeassets/img/blog_img.jpg');"></div>
<div class="main main-raised">
  <div class="profile-content">
    <div class="container">

      <div class="description text-center">
        <div class="name">
          <h2 class="title">Blog</h2>

        </div>

      </div>
      <div class="row">
        <div class="col-md-6 ml-auto mr-auto">
          <div class="profile-tabs">
            <ul class="nav nav-pills nav-pills-icons justify-content-center" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" href="#studio" role="tab" data-toggle="tab">
                  <i class="material-icons">functions</i> Functional Testing
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="#works" role="tab" data-toggle="tab">
                  <i class="material-icons">bubble_chart</i> Non Functional Testing
                </a>
              </li>

            </ul>
          </div>
        </div>
      </div>
      <div class="tab-content tab-space">
        <div class="tab-pane active text-center gallery" id="studio">
          <div class="row">
            <div class="col-md-12  mr-auto">
              <h2><b>A Beginners Guide to Functional Testing of Softwares</b></h2>

              <p style="text-align: justify">A software test is done with an intention of finding whether the software is satisfying the requirements of your clients. It is highly important because computer software is used in important processes like navigating an aeroplane and there have been instances of crashes due to certain defects or bugs in software installed on those devices.</p>

              <h3 style="text-align: left"><b>Defects and Bugs</b></h3>

              <p style="text-align: justify">These are two terms a software tester would hear for the rest of their lives, A ‘Defect’ happens when the actual result is different from the expected results while running a test on the software. When the defect is accepted by the developer of the software it becomes a ‘Bug’.</p>

              <p style="text-align: justify">Check out the brief information on various types of Functional settings.</p>

              <h3 style="text-align: left"><b>Unit Testing</b></h3>

              <p style="text-align: justify">Testing a particular unit (Single Program) of a software or a large program is known as Unit Testing.</p>

              <h3 style="text-align: left"><b>Integration Testing</b></h3>

              <p style="text-align: justify">An integration test is done to check if the integration or adding a new program to an existing one is or isn't affecting the existing performance or function of the software. In integration testing, a module is tested by using two approaches ‘Top to Bottom’  and ‘Bottom to Top’. While doing the first kind, all the important modules are placed on top, followed by the submodules. The missing submodules are replaced by a dummy component called ‘Stub’. During the bottom to top integration if any of the submodules is found missing it’s replaced by a component known as ‘Driver’.</p>

              <h3 style="text-align: left"><b>Modular/ Component Testing</b></h3>

              <p style="text-align: justify">Testing a particularly small unit of program is called ‘Modular’ or ‘Component’ testing.</p>

              <p style="text-align: justify">People usually get confused between the unit and modular testing, Unit Test is done by software developers themselves whereas the Modular test is done by designated ‘Testers’. Both are kind of similar but the testing is done from the point of view of the both. While the Unit and Integration is done by developers collectively known as “White Box” testing. The remaining types of tests done by the testers are known as ‘Black Box’ testing. Also, the White Box testing is done with the knowledge of the codes are used because it is done by developers but it is not the same in the case of Black Box testers.</p>

              <h3 style="text-align: left"><b>Smoke testing</b></h3>

              <p style="text-align: justify">The testing of the critical functions of a software program is known as ‘Smoke testing’.</p>

              <h3 style="text-align: left"><b>Sanity testing</b></h3>

              <p style="text-align: justify">Testing a particularly low-level functionality of a software is known as ‘Sanity testing’.</p>

              <p style="text-align: justify">Both Smoke and Sanity tests are done after a software is developed. The smoke test is done on the initial build. Before accepting the initial build all positive cases are performed on it like the Build Verification Testing (BVT) and  Build Acceptance Testing (BAT). Sanity testing is done after a regression, which means adding a new function which will modify the build. So sanity testing is done on the modified builds. It saves a lot of time by identifying small errors and helps in their quick eliminations.</p>

              <h3 style="text-align: left"><b>Re-Testing</b></h3>

              <p style="text-align: justify">‘Re-Test’ is done to check if the reported bugs have been fixed or not.</p>

              <h3 style="text-align: left"><b>Regression Testing</b></h3>

              <p style="text-align: justify">A ‘Regression’ test is done to check whether the newly added function to an existing program is messing with the existing program causing problems in the existing performance.</p>

              <h3 style="text-align: left"><b>Alpha Testing</b></h3>

              <p style="text-align: justify">The testing of software from the developer's side before releasing it to the public is known as ‘Alpha Test’.</p>

              <h3 style="text-align: left"><b>Beta Testing</b></h3>

              <p style="text-align: justify">A ‘Beta Test’ is done from the client point of view to ensure successful functioning software without any defects or bugs.</p>


            </div>
          </div>
        </div>
        <div class="tab-pane text-center gallery" id="works">
          <div class="row">
            <div class="col-md-12  mr-auto" >
              <h2><b>A Beginners Guide to Basic Non-Functional Manual Testing</b></h2>

              <p style="text-align: justify">Different types of software tests are done to ensure that the software performs smoothly even during high loads. To test the software various tests are done on the following components like Performance, Database, Security, Compatibility and GUI.</p>

              <h3 style="text-align: left"><b>Performance Testing</b></h3>

              <p style="text-align: justify">The main objective of running a performance test is to see if the software is giving a quick response or not. The scalability of the software is also checked to determine the maximum load that the software could handle. A stability test is also done during the performance test to make sure the stability of the software during varying loads.</p>

              <p style="text-align: justify">Now that you know the basic details of performance testing, let's go a little deeper and know about Load Test. This test is done to check the ability of the application under the ‘anticipated loads’, it is done to identify whether there are any hurdles before the software is cleared to go live. To make things simpler let's assume that your favourite shopping websites like eBay and Amazon allow ten thousand users to access at the same time. The software is checked under the same condition; like if a hundred thousand people are accessing at the same time to check if the application is giving the desired performance. There are third party software tools like Load Runner, Apache generator etc.</p>

              <p style="text-align: justify">After this, a Stress Test is done to check how the software functions under an extreme flow of data. It's is done to identify the breaking point of the application. For example, we know that an application can support up to a hundred thousand people at the same time but the stress test will tell the number of users the software can handle beyond that one hundred thousand before crashing.</p>

              <p style="text-align: justify">The last one is the Endurance Test which is also known as the ‘Soak Test’. In simple terms, back to back load tests are conducted on the software to check the functioning of the software. For example, If a software works fine for an hour with a hundred thousand people accessing it, how will it perform for ten hours with the same amount of people on it. This is to check the performance of the software under heavy expected loads for a longer period of time.</p>

              <p style="text-align: justify">These are the three major types of the performance tests. There are other minor tests like ‘Spike test’, which checks the software performance during sudden differences in the number of users. A ‘Volume test’ is done by populating the software by populating it with a large amount of data and the performance of the software is checked under varying database values. Another process called ‘Scalability’ is done by increasing the configurations of the software to check the perfection.</p>

              <h3 style="text-align: left"><b>Database Test</b></h3>

              <p style="text-align: justify">For example; you are filling a form in the ‘Front-end’, this form determines how the form is stored in the database and how the form would appear while retrieving on the front-end. In simple terms, while the database testing the data is sent into the database, where it is stored and then retrieved.  It's is done to check whether the data is stored safely without any corruptions. It’s done by the software engineers using certain HTML codes which checks if the data has been stored in perfect tables.</p>

              <h3 style="text-align: left"><b>Security Testing</b></h3>

              <p style="text-align: justify">It is done to check all the loopholes inside the software's which could cost high loses to the developers. The Protocols and Authentication are the two major things which are checked during a Security test.</p>

              <h3 style="text-align: left"><b>Compatibility Testing</b></h3>

              <p style="text-align: justify">A ‘Compatibility test’ is done to check whether the software is functioning well on different operating systems like Android, Mac OS, Windows etc. and even under various browsers like Chrome, Firefox and Edge.</p>

              <h3 style="text-align: left"><b>GUI Testing</b></h3>

              <p style="text-align: justify">The Graphical User Interface (GUI) or the UI as it is commonly known is checked for its responses and functionality under GUI testing. For example, if a ‘Submit’ button isn't functioning on a form, a GUI test is done to enable the function. It is done to ensure the application appears and functions according to our or a client's requirements and various visible components like the background colour, the position of a text box etc. is ensured in this test.</p>




            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>
<footer class="footer footer-default">
  <div class="container">
    <nav class="float-left">
      <ul>
        <li>
          <a href="/features">
            Features
          </a>
        </li>
        <li>
          <a href="/pricing">
            Pricing
          </a>
        </li>
        <li>
          <a href="/blog">
            Blog
          </a>
        </li>
        <li>
          <a href="/company">
            Company
          </a>
        </li>

      </ul>
    </nav>
    <div class="copyright float-right">
      &copy;Jellyfish Ninja.Inc
    </div>
  </div>
</footer>
<!--   Core JS Files   -->
<script src="homeassets/js/core/jquery.min.js" type="text/javascript"></script>
<script src="homeassets/js/core/popper.min.js" type="text/javascript"></script>
<script src="homeassets/js/core/bootstrap-material-design.min.js" type="text/javascript"></script>
<script src="homeassets/js/plugins/moment.min.js"></script>
<!--	Plugin for the Datepicker, full documentation here: https://github.com/Eonasdan/bootstrap-datetimepicker -->
<script src="homeassets/js/plugins/bootstrap-datetimepicker.js" type="text/javascript"></script>
<!--  Plugin for the Sliders, full documentation here: http://refreshless.com/nouislider/ -->
<script src="homeassets/js/plugins/nouislider.min.js" type="text/javascript"></script>
<!-- Control Center for Now Ui Kit: parallax effects, scripts for the example pages etc -->
<script src="homeassets/js/material-kit.js?v=2.0.3" type="text/javascript"></script>
<script type="text/javascript">!function(t,e){"use strict";var r=function(t){try{var r=e.head||e.getElementsByTagName("head")[0],a=e.createElement("script");a.setAttribute("type","text/javascript"),a.setAttribute("src",t),r.appendChild(a)}catch(t){}};t.CollectId = "5b22344406b65e9a458fd518",r("https://collectcdn.com/launcher.js")}(window,document);</script>
</body>

</html>
